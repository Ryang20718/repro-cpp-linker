load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")

COPTS = [
    "-DGDAL_COMPILATION",
]

SPECIALIZED_COPTS = select({
    "@platforms//cpu:aarch64": [],
    "@platforms//cpu:x86_64": [
        "-DHAVE_SSE_AT_COMPILE_TIME", "-msse",
        "-DHAVE_SSE2_AT_COMPILE_TIME", "-msse",
        "-DHAVE_SSSE3_AT_COMPILE_TIME", "-mssse3",
        "-DHAVE_AVX_AT_COMPILE_TIME", "-mavx",
    ],
})

copy_file(
    name = "expand_gdal_version",
    src = "gcore/gdal_version.h.in", 
    out = "gdal_version/gdal_version.h",
)

cc_library(
    name = "gdal_version",
    hdrs = ["gdal_version/gdal_version.h"],
    includes = ["gdal_version"],
)

expand_template(
    name = "expand_cpl_config",
    template = "port/cpl_config.h.in",
    out = "port/cpl_config.h",
    substitutions = {
        "#undef GDAL_PREFIX": "/* #undef GDAL_PREFIX */",
        "#undef SIZEOF_INT": "#define SIZEOF_INT 4",
        "#undef SIZEOF_UNSIGNED_LONG": "#define SIZEOF_UNSIGNED_LONG 8",
        "#undef SIZEOF_VOIDP": "#define SIZEOF_VOIDP 8",
        "#undef VSI_NEED_LARGEFILE64_SOURCE": "/* #undef VSI_NEED_LARGEFILE64_SOURCE */",
        "#undef USE_GCC_VISIBILITY_FLAG": "/* #undef USE_GCC_VISIBILITY_FLAG */",
        "#undef HAVE_GCC_ATOMIC_BUILTINS": "#define HAVE_GCC_ATOMIC_BUILTINS 1",
        "#undef HAVE_GCC_BSWAP": "#define HAVE_GCC_BSWAP 1",
        "#undef WORDS_BIGENDIAN": "/* #undef WORDS_BIGENDIAN */",
        "#undef VSI_STAT64_T": "#define VSI_STAT64_T stat64",
        "#undef HAVE_STD_IS_NAN": "#define HAVE_STD_IS_NAN 1",
        "#undef CPL_MULTIPROC_PTHREAD": "#define CPL_MULTIPROC_PTHREAD 1",
        "#undef HAVE_PTHREAD_MUTEX_RECURSIVE": "#define HAVE_PTHREAD_MUTEX_RECURSIVE 1",
        "#undef HAVE_PTHREAD_MUTEX_ADAPTIVE_NP": "#define HAVE_PTHREAD_MUTEX_ADAPTIVE_NP 1",
        "#undef HAVE_PTHREAD_SPINLOCK": "#define HAVE_PTHREAD_SPINLOCK 1",
        "#undef HAVE_5ARGS_MREMAP": "#define HAVE_5ARGS_MREMAP 1",
        "#undef HAVE_GETRLIMIT": "#define HAVE_GETRLIMIT 1",
        "#undef HAVE_RLIMIT_AS": "#define HAVE_RLIMIT_AS 1",
        "#undef HAVE_DIRECT_H": "/* #undef HAVE_DIRECT_H */",
        "#undef HAVE_DLFCN_H": "#define HAVE_DLFCN_H 1",
        "#undef HAVE_FCNTL_H": "#define HAVE_FCNTL_H 1",
        "#undef HAVE_GETCWD": "#define HAVE_GETCWD 1",
        "#undef HAVE_ICONV": "#define HAVE_ICONV 1",
        "#undef HAVE_UINT128_T": "#define HAVE_UINT128_T 1",
        "#undef HAVE_LOCALE_H": "#define HAVE_LOCALE_H 1",
        "#undef HAVE_SYS_STAT_H": "#define HAVE_SYS_STAT_H 1",
        "#undef HAVE_SYS_TYPES_H": "#define HAVE_SYS_TYPES_H 1",
        "#undef HAVE_UNISTD_H": "#define HAVE_UNISTD_H 1",
        "#undef HAVE_XLOCALE_H": "/* #undef HAVE_XLOCALE_H */",
        "#undef HAVE_VSNPRINTF": "#define HAVE_VSNPRINTF 1",
        "#undef HAVE_READLINK": "#define HAVE_READLINK 1",
        "#undef HAVE_POSIX_SPAWNP": "#define HAVE_POSIX_SPAWNP 1",
        "#undef HAVE_POSIX_MEMALIGN": "#define HAVE_POSIX_MEMALIGN 1",
        "#undef HAVE_VFORK": "#define HAVE_VFORK 1",
        "#undef HAVE_MMAP": "#define HAVE_MMAP 1",
        "#undef HAVE_SIGACTION": "#define HAVE_SIGACTION 1",
        "#undef HAVE_STATVFS": "#define HAVE_STATVFS 1",
        "#undef HAVE_STATVFS64": "#define HAVE_STATVFS64 1",
        "#undef HAVE_LSTAT": "#define HAVE_LSTAT 1",
        "#undef ICONV_CPP_CONST": "#define ICONV_CPP_CONST ",
        "#undef JVM_LIB_DLOPEN": "/* #undef JVM_LIB_DLOPEN */",
        "#undef MACOSX_FRAMEWORK": "/* #undef MACOSX_FRAMEWORK */",
        "#undef UNIX_STDIO_64": "#define UNIX_STDIO_64 1",
        "#undef VSI_FOPEN64": "#define VSI_FOPEN64 fopen64",
        "#undef VSI_FTRUNCATE64": "#define VSI_FTRUNCATE64 ftruncate64",
        "#undef VSI_FSEEK64": "#define VSI_FSEEK64 fseeko64",
        "#undef VSI_FTELL64": "#define VSI_FTELL64 ftello64",
        "#undef VSI_STAT64": "#define VSI_STAT64 stat64",
        "#undef HAVE_SC_PHYS_PAGES": "#define HAVE_SC_PHYS_PAGES 1",
        "#undef HAVE_USELOCALE": "#define HAVE_USELOCALE 1",
        "#undef HAVE_GCC_WARNING_ZERO_AS_NULL_POINTER_CONSTANT": "#define HAVE_GCC_WARNING_ZERO_AS_NULL_POINTER_CONSTANT 1",
    },
)

cc_library(
    name = "cpl_config",
    srcs = [
        "port/cpl_conv.h",
        "port/cpl_error.h",
        "port/cpl_port.h",
        "port/cpl_progress.h",
        "port/cpl_string.h",
        "port/cpl_vsi.h",
    ],
    hdrs = [
        "port/cpl_config.h",
    ],
    includes = ["port"],
)

cc_library(
    name = "cpl",
    srcs = [
        "port/cpl_alibaba_oss.cpp",
        "port/cpl_alibaba_oss.h",
        "port/cpl_atomic_ops.cpp",
        "port/cpl_atomic_ops.h",
        "port/cpl_auto_close.h",
        "port/cpl_aws_win32.cpp",
        "port/cpl_aws.cpp",
        "port/cpl_aws.h",
        "port/cpl_azure.cpp",
        "port/cpl_azure.h",
        "port/cpl_base64.cpp",
        "port/cpl_compressor.cpp",
        "port/cpl_compressor.h",
        "port/cpl_config_extras.h",
        "port/cpl_conv.cpp",
        "port/cpl_cpu_features.cpp",
        "port/cpl_cpu_features.h",
        "port/cpl_csv.cpp",
        "port/cpl_csv.h",
        "port/cpl_curl_priv.h",
        "port/cpl_error_internal.h",
        "port/cpl_error.cpp",
        "port/cpl_findfile.cpp",
        "port/cpl_float.cpp",
        "port/cpl_float.h",
        "port/cpl_getexecpath.cpp",
        "port/cpl_google_cloud.cpp",
        "port/cpl_google_cloud.h",
        "port/cpl_google_oauth2.cpp",
        "port/cpl_hash_set.cpp",
        "port/cpl_hash_set.h",
        "port/cpl_http.cpp",
        "port/cpl_http.h",
        "port/cpl_json_header.h",
        "port/cpl_json_streaming_parser.cpp",
        "port/cpl_json_streaming_parser.h",
        "port/cpl_json_streaming_writer.cpp",
        "port/cpl_json_streaming_writer.h",
        "port/cpl_json.cpp",
        "port/cpl_json.h",
        "port/cpl_list.cpp",
        "port/cpl_list.h",
        "port/cpl_md5.cpp",
        "port/cpl_md5.h",
        "port/cpl_mem_cache.h",
        "port/cpl_minixml.cpp",
        "port/cpl_minixml.h",
        "port/cpl_minizip_ioapi.cpp",
        "port/cpl_minizip_unzip.cpp",
        "port/cpl_minizip_zip.cpp",
        "port/cpl_multiproc.cpp",
        "port/cpl_multiproc.h",
        "port/cpl_path.cpp",
        "port/cpl_progress.cpp",
        "port/cpl_progress.h",
        "port/cpl_quad_tree.cpp",
        "port/cpl_quad_tree.h",
        "port/cpl_recode_iconv.cpp",
        "port/cpl_recode_stub.cpp",
        "port/cpl_recode.cpp",
        "port/cpl_safemaths.hpp",
        "port/cpl_sha1.cpp",
        "port/cpl_sha1.h",
        "port/cpl_sha256.cpp",
        "port/cpl_sha256.h",
        "port/cpl_spawn.cpp",
        "port/cpl_spawn.h",
        "port/cpl_string.cpp",
        "port/cpl_strtod.cpp",
        "port/cpl_swift.cpp",
        "port/cpl_swift.h",
        "port/cpl_time.cpp",
        "port/cpl_time.h",
        "port/cpl_userfaultfd.cpp",
        "port/cpl_userfaultfd.h",
        "port/cpl_vax.cpp",
        "port/cpl_vax.h",
        "port/cpl_virtualmem.cpp",
        "port/cpl_virtualmem.h",
        "port/cpl_vsi_error.cpp",
        "port/cpl_vsi_error.h",
        "port/cpl_vsi_mem.cpp",
        "port/cpl_vsil_abstract_archive.cpp",
        "port/cpl_vsil_adls.cpp",
        "port/cpl_vsil_az.cpp",
        "port/cpl_vsil_buffered_reader.cpp",
        "port/cpl_vsil_cache.cpp",
        "port/cpl_vsil_crypt.cpp",
        "port/cpl_vsil_curl_class.h",
        "port/cpl_vsil_curl_priv.h",
        "port/cpl_vsil_curl_streaming.cpp",
        "port/cpl_vsil_curl.cpp",
        "port/cpl_vsil_gs.cpp",
        "port/cpl_vsil_gzip.cpp",
        "port/cpl_vsil_hdfs.cpp",
        "port/cpl_vsil_oss.cpp",
        "port/cpl_vsil_plugin.cpp",
        "port/cpl_vsil_plugin.h",
        "port/cpl_vsil_s3.cpp",
        "port/cpl_vsil_sparsefile.cpp",
        "port/cpl_vsil_stdin.cpp",
        "port/cpl_vsil_stdout.cpp",
        "port/cpl_vsil_subfile.cpp",
        "port/cpl_vsil_swift.cpp",
        "port/cpl_vsil_tar.cpp",
        "port/cpl_vsil_unix_stdio_64.cpp",
        "port/cpl_vsil_uploadonclose.cpp",
        "port/cpl_vsil_webhdfs.cpp",
        "port/cpl_vsil.cpp",
        "port/cpl_vsisimple.cpp",
        "port/cpl_worker_thread_pool.cpp",
        "port/cpl_worker_thread_pool.h",
        "port/cpl_xml_validate.cpp",
        "port/cpl_zlib_header.h",
        "port/cplgetsymbol.cpp",
        "port/cplkeywordparser.cpp",
        "port/cplkeywordparser.h",
        "port/cplstring.cpp",
        "port/cplstringlist.cpp",
        "port/gdal_csv.h",
    ],
    hdrs = [
        "port/cpl_atomic_ops.h",
        "port/cpl_compressor.h",
        "port/cpl_conv.h",
        "port/cpl_csv.h",
        "port/cpl_error.h",
        "port/cpl_hash_set.h",
        "port/cpl_http.h",
        "port/cpl_json.h",
        "port/cpl_list.h",
        "port/cpl_minixml.h",
        "port/cpl_minizip_ioapi.h",
        "port/cpl_minizip_unzip.h",
        "port/cpl_minizip_zip.h",
        "port/cpl_multiproc.h",
        "port/cpl_quad_tree.h",
        "port/cpl_spawn.h",
        "port/cpl_string.h",
        "port/cpl_time.h",
        "port/cpl_virtualmem.h",
        "port/cpl_vsi_error.h",
        "port/cpl_vsi_virtual.h",
        "port/cplkeywordparser.h",
    ],
    includes = ["port"],
    copts = COPTS + [
        "-DHAVE_ZSTD",
        "-DHAVE_LZ4",
        "-DHAVE_CURL",
        "-DHAVE_LIBZ",
        "-Wno-deprecated-declarations",
        "-Wno-unused-function",
    ] + SPECIALIZED_COPTS,
    deps = [
        ":json",
        "@zstd",
        "@lz4",
        "@zlib",
        "@curl",
        ":cpl_config",
    ],
)

# Internal json library
cc_library(
    name = "json",
    srcs = [
        "ogr/ogrsf_frmts/geojson/libjson/arraylist.c",
        "ogr/ogrsf_frmts/geojson/libjson/arraylist.h",
        "ogr/ogrsf_frmts/geojson/libjson/config.h",
        "ogr/ogrsf_frmts/geojson/libjson/debug.c",
        "ogr/ogrsf_frmts/geojson/libjson/debug.h",
        "ogr/ogrsf_frmts/geojson/libjson/json_c_version.c",
        "ogr/ogrsf_frmts/geojson/libjson/json_c_version.h",
        "ogr/ogrsf_frmts/geojson/libjson/json_config.h",
        "ogr/ogrsf_frmts/geojson/libjson/json_inttypes.h",
        "ogr/ogrsf_frmts/geojson/libjson/json_object_iterator.c",
        "ogr/ogrsf_frmts/geojson/libjson/json_object_iterator.h",
        "ogr/ogrsf_frmts/geojson/libjson/json_object_private.h",
        "ogr/ogrsf_frmts/geojson/libjson/json_object.c",
        "ogr/ogrsf_frmts/geojson/libjson/json_object.h",
        "ogr/ogrsf_frmts/geojson/libjson/json_pointer.h",
        "ogr/ogrsf_frmts/geojson/libjson/json_tokener.c",
        "ogr/ogrsf_frmts/geojson/libjson/json_tokener.h",
        "ogr/ogrsf_frmts/geojson/libjson/json_types.h",
        "ogr/ogrsf_frmts/geojson/libjson/json_util.c",
        "ogr/ogrsf_frmts/geojson/libjson/json_util.h",
        "ogr/ogrsf_frmts/geojson/libjson/json.h",
        "ogr/ogrsf_frmts/geojson/libjson/linkhash.c",
        "ogr/ogrsf_frmts/geojson/libjson/linkhash.h",
        "ogr/ogrsf_frmts/geojson/libjson/math_compat.h",
        "ogr/ogrsf_frmts/geojson/libjson/printbuf.c",
        "ogr/ogrsf_frmts/geojson/libjson/printbuf.h",
        "ogr/ogrsf_frmts/geojson/libjson/random_seed.c",
        "ogr/ogrsf_frmts/geojson/libjson/random_seed.h",
        "ogr/ogrsf_frmts/geojson/libjson/snprintf_compat.h",
        "ogr/ogrsf_frmts/geojson/libjson/strdup_compat.h",
        "ogr/ogrsf_frmts/geojson/libjson/strerror_override.c",
        "ogr/ogrsf_frmts/geojson/libjson/strerror_override.h",
        "ogr/ogrsf_frmts/geojson/libjson/symbol_renames.h",
    ],
    copts = COPTS,
    deps = [
        ":cpl_config",
    ],
    includes = ["ogr/ogrsf_frmts/geojson/libjson"],
)

# Internal geotiff library
cc_library(
    name = "geotiff",
    srcs = [
        "frmts/gtiff/libgeotiff/cpl_serv.h",
        "frmts/gtiff/libgeotiff/geo_config.h",
        "frmts/gtiff/libgeotiff/geo_extra.c",
        "frmts/gtiff/libgeotiff/geo_free.c",
        "frmts/gtiff/libgeotiff/geo_get.c",
        "frmts/gtiff/libgeotiff/geo_keyp.h",
        "frmts/gtiff/libgeotiff/geo_names.c",
        "frmts/gtiff/libgeotiff/geo_new.c",
        "frmts/gtiff/libgeotiff/geo_normalize.c",
        "frmts/gtiff/libgeotiff/geo_normalize.h",
        "frmts/gtiff/libgeotiff/geo_print.c",
        "frmts/gtiff/libgeotiff/geo_set.c",
        "frmts/gtiff/libgeotiff/geo_simpletags.c",
        "frmts/gtiff/libgeotiff/geo_simpletags.h",
        "frmts/gtiff/libgeotiff/geo_tiffp.c",
        "frmts/gtiff/libgeotiff/geo_tiffp.h",
        "frmts/gtiff/libgeotiff/geo_trans.c",
        "frmts/gtiff/libgeotiff/geo_write.c",
        "frmts/gtiff/libgeotiff/geokeys.h",
        "frmts/gtiff/libgeotiff/geonames.h",
        "frmts/gtiff/libgeotiff/geotiff_proj4.c",
        "frmts/gtiff/libgeotiff/geotiff.h",
        "frmts/gtiff/libgeotiff/geotiffio.h",
        "frmts/gtiff/libgeotiff/geovalues.h",
        "frmts/gtiff/libgeotiff/xtiff.c",
        "frmts/gtiff/libgeotiff/xtiffio.h",
    ] + glob(["frmts/gtiff/libgeotiff/*.inc"]),
    copts = COPTS + ["-Wno-deprecated-declarations"],
    deps = [
        ":cpl_config",
        "@tiff",
        "@proj",
    ],
    includes = ["frmts/gtiff/libgeotiff"],
)

cc_library(
    name = "ogr_headers",
    hdrs = [
        "ogr/ogr_api.h",
        "ogr/ogr_core.h",
        "ogr/ogr_feature.h",
        "ogr/ogr_featurestyle.h",
        "ogr/ogr_geocoding.h",
        "ogr/ogr_geometry.h",
        "ogr/ogr_geos.h",
        "ogr/ogr_p.h",
        "ogr/ogr_spatialref.h",
        "ogr/ogr_srs_api.h",
        "ogr/ogr_swq.h",
        "ogr/ogrsf_frmts/generic/ogrlayerdecorator.h",
        "ogr/ogrsf_frmts/geojson/directedacyclicgraph.hpp",
        "ogr/ogrsf_frmts/geojson/ogrgeojsonreader.h",
        "ogr/ogrsf_frmts/geojson/ogrgeojsonutils.h",
        "ogr/ogrsf_frmts/geojson/ogrgeojsonwriter.h",
        "ogr/ogrsf_frmts/ogrsf_frmts.h",
    ],
    includes = ["ogr", "ogr/ogrsf_frmts", "ogr/ogrsf_frmts/geojson", "ogr/ogrsf_frmts/generic"],
)

cc_library(
    name = "gdal_standard_includes",
    hdrs = [
        "alg/gdal_alg_priv.h",
        "alg/gdal_alg.h",
        "alg/gdalgrid.h",
        "alg/gdalpansharpen.h",
        "alg/gdalwarper.h",
        "apps/commonutils.h",
        "apps/gdal_utils.h",
        "frmts/gtiff/cogdriver.h",
        "frmts/gtiff/gt_wkt_srs_for_gdal.h",
        "frmts/mem/memdataset.h",
        "frmts/vrt/gdal_vrt.h",
        "frmts/vrt/vrtdataset.h",
        "gcore/gdal_frmts.h",
        "gcore/gdal_mdreader.h",
        "gcore/gdal_pam.h",
        "gcore/gdal_priv_templates.hpp",
        "gcore/gdal_priv.h",
        "gcore/gdal_proxy.h",
        "gcore/gdal_rat.h",
        "gcore/gdal_thread_pool.h",
        "gcore/gdal.h",
        "gcore/gdalcachedpixelaccessor.h",
        "gcore/gdalgeorefpamdataset.h",
        "gcore/gdaljp2abstractdataset.h",
        "gcore/gdaljp2metadata.h",
        "gcore/gdalpython.h",
        "gcore/gdalsse_priv.h",
        "gcore/rawdataset.h",
        "gcore/tilematrixset.hpp",
        "ogr/ogr_proj_p.h",
        "ogr/ograpispy.h",
        "ogr/ogrsf_frmts/ogr_attrind.h",
    ],
    includes = [
        "gcore",
        "apps",
        "alg",
        "ogr/ogrsf_frmts",
        "frmts/gtiff",
        "frmts/vrt",
        "frmts/mem",
    ],
    deps = [
        ":cpl",
        "@proj",
        ":ogr_headers",
        ":gdal_version",
    ]
)

cc_library(
    name = "alg",
    srcs = [
        "alg/contour.cpp",
        "alg/delaunay.c",
        "alg/gdal_crs.cpp",
        "alg/gdal_octave.cpp",
        "alg/gdal_rpc.cpp",
        "alg/gdal_simplesurf.cpp",
        "alg/gdal_tps.cpp",
        "alg/gdalapplyverticalshiftgrid.cpp",
        "alg/gdalchecksum.cpp",
        "alg/gdalcutline.cpp",
        "alg/gdaldither.cpp",
        "alg/gdalgeoloc_carray_accessor.h",
        "alg/gdalgeoloc_dataset_accessor.h",
        "alg/gdalgeoloc.cpp",
        "alg/gdalgeoloc.h",
        "alg/gdalgeolocquadtree.cpp",
        "alg/gdalgeolocquadtree.h",
        "alg/gdalgrid.cpp",
        "alg/gdalgridavx.cpp",
        "alg/gdalgridsse.cpp",
        "alg/gdallinearsystem.cpp",
        "alg/gdallinearsystem.h",
        "alg/gdalmatching.cpp",
        "alg/gdalmediancut.cpp",
        "alg/gdalpansharpen.cpp",
        "alg/gdalproximity.cpp",
        "alg/gdalrasterize.cpp",
        "alg/gdalrasterpolygonenumerator.cpp",
        "alg/gdalsievefilter.cpp",
        "alg/gdalsimplewarp.cpp",
        "alg/gdaltransformer.cpp",
        "alg/gdaltransformgeolocs.cpp",
        "alg/gdalwarper.cpp",
        "alg/gdalwarpkernel_opencl.h",
        "alg/gdalwarpkernel.cpp",
        "alg/gdalwarpoperation.cpp",
        "alg/llrasterize.cpp",
        "alg/polygonize.cpp",
        "alg/rasterfill.cpp",
        "alg/thinplatespline.cpp",
        "alg/thinplatespline.h",
        "alg/viewshed.cpp",
    ] + glob(["alg/marching_squares/*.h"]),
    hdrs = [
        "alg/gdal_alg.h",
        "alg/gdal_alg_priv.h",
        "alg/gdalgrid.h",
        "alg/gdalgrid_priv.h",
        "alg/gdalwarper.h",
        "alg/gdal_simplesurf.h",
        "alg/gdalpansharpen.h",
    ],
    includes = ["alg/marching_squares"],
    copts = COPTS + [
        # https://stackoverflow.com/a/48149400
        "-Wno-psabi",
    ] + SPECIALIZED_COPTS,
    deps = [
        ":gdal_standard_includes",
        "@proj",
    ]
)

OGR = [
    "ogr/gml2ogrgeometry.cpp",
    "ogr/ogr_api.cpp",
    "ogr/ogr_expat.cpp",
    "ogr/ogr_expat.h",
    "ogr/ogr_fromepsg.cpp",
    "ogr/ogr_geo_utils.cpp",
    "ogr/ogr_geo_utils.h",
    "ogr/ogr_geocoding.cpp",
    "ogr/ogr_libs.h",
    "ogr/ogr_proj_p.cpp",
    "ogr/ogr_sfcgal.h",
    "ogr/ogr_srs_dict.cpp",
    "ogr/ogr_srs_erm.cpp",
    "ogr/ogr_srs_esri_names.h",
    "ogr/ogr_srs_esri.cpp",
    "ogr/ogr_srs_ozi.cpp",
    "ogr/ogr_srs_panorama.cpp",
    "ogr/ogr_srs_pci.cpp",
    "ogr/ogr_srs_usgs.cpp",
    "ogr/ogr_srs_xml.cpp",
    "ogr/ogr_srsnode.cpp",
    "ogr/ogr_xerces_headers.h",
    "ogr/ogr_xerces.cpp",
    "ogr/ogr_xerces.h",
    "ogr/ogr2gmlgeometry.cpp",
    "ogr/ograpispy.cpp",
    "ogr/ograpispy.h",
    "ogr/ograssemblepolygon.cpp",
    "ogr/ogrcircularstring.cpp",
    "ogr/ogrcompoundcurve.cpp",
    "ogr/ogrct.cpp",
    "ogr/ogrcurve.cpp",
    "ogr/ogrcurvecollection.cpp",
    "ogr/ogrcurvepolygon.cpp",
    "ogr/ogrfeature.cpp",
    "ogr/ogrfeaturedefn.cpp",
    "ogr/ogrfeaturequery.cpp",
    "ogr/ogrfeaturestyle.cpp",
    "ogr/ogrfielddefn.cpp",
    "ogr/ogrgeometry.cpp",
    "ogr/ogrgeometrycollection.cpp",
    "ogr/ogrgeometryfactory.cpp",
    "ogr/ogrgeomfielddefn.cpp",
    "ogr/ogrlinearring.cpp",
    "ogr/ogrlinestring.cpp",
    "ogr/ogrmulticurve.cpp",
    "ogr/ogrmultilinestring.cpp",
    "ogr/ogrmultipoint.cpp",
    "ogr/ogrmultipolygon.cpp",
    "ogr/ogrmultisurface.cpp",
    "ogr/ogrpgeogeometry.cpp",
    "ogr/ogrpgeogeometry.h",
    "ogr/ogrpoint.cpp",
    "ogr/ogrpolygon.cpp",
    "ogr/ogrpolyhedralsurface.cpp",
    "ogr/ogrspatialreference.cpp",
    "ogr/ogrsurface.cpp",
    "ogr/ogrtriangle.cpp",
    "ogr/ogrtriangulatedsurface.cpp",
    "ogr/ogrutils.cpp",
    "ogr/swq_expr_node.cpp",
    "ogr/swq_op_general.cpp",
    "ogr/swq_op_registrar.cpp",
    "ogr/swq_parser.cpp",
    "ogr/swq_parser.hpp",
    "ogr/swq_select.cpp",
    "ogr/swq.cpp",
]

OGR_KML = [
    "ogr/ogrsf_frmts/kml/kml.h",
    "ogr/ogrsf_frmts/kml/kmlutility.h",
    "ogr/ogrsf_frmts/kml/kmlvector.h",
    "ogr/ogrsf_frmts/kml/ogr_kml.h",
    "ogr/ogrsf_frmts/kml/ogr2kmlgeometry.cpp",
    "ogr/ogrsf_frmts/kml/ogrkmldatasource.cpp",
    "ogr/ogrsf_frmts/kml/ogrkmldriver.cpp",
    "ogr/ogrsf_frmts/kml/ogrkmllayer.cpp",
]

OGR_MEM = [
    "ogr/ogrsf_frmts/mem/ogr_mem.h",
    "ogr/ogrsf_frmts/mem/ogrmemdatasource.cpp",
    "ogr/ogrsf_frmts/mem/ogrmemdriver.cpp",
    "ogr/ogrsf_frmts/mem/ogrmemlayer.cpp",
]

OGR_GEOJSON = [
    "ogr/ogrsf_frmts/geojson/directedacyclicgraph.hpp",
    "ogr/ogrsf_frmts/geojson/ogr_geojson.h",
    "ogr/ogrsf_frmts/geojson/ogresrijsondriver.cpp",
    "ogr/ogrsf_frmts/geojson/ogresrijsonreader.cpp",
    "ogr/ogrsf_frmts/geojson/ogrgeojsondatasource.cpp",
    "ogr/ogrsf_frmts/geojson/ogrgeojsondriver.cpp",
    "ogr/ogrsf_frmts/geojson/ogrgeojsonlayer.cpp",
    "ogr/ogrsf_frmts/geojson/ogrgeojsonreader.cpp",
    "ogr/ogrsf_frmts/geojson/ogrgeojsonreader.h",
    "ogr/ogrsf_frmts/geojson/ogrgeojsonseqdriver.cpp",
    "ogr/ogrsf_frmts/geojson/ogrgeojsonutils.cpp",
    "ogr/ogrsf_frmts/geojson/ogrgeojsonutils.h",
    "ogr/ogrsf_frmts/geojson/ogrgeojsonwritelayer.cpp",
    "ogr/ogrsf_frmts/geojson/ogrgeojsonwriter.cpp",
    "ogr/ogrsf_frmts/geojson/ogrgeojsonwriter.h",
    "ogr/ogrsf_frmts/geojson/ogrtopojsondriver.cpp",
    "ogr/ogrsf_frmts/geojson/ogrtopojsonreader.cpp",
]

OGRSF_FRMTS = [
    "ogr/ogrsf_frmts/generic/ogr_attrind.cpp",
    "ogr/ogrsf_frmts/generic/ogr_gensql.cpp",
    "ogr/ogrsf_frmts/generic/ogr_gensql.h",
    "ogr/ogrsf_frmts/generic/ogr_miattrind.cpp",
    "ogr/ogrsf_frmts/generic/ogrdatasource.cpp",
    "ogr/ogrsf_frmts/generic/ogreditablelayer.cpp",
    "ogr/ogrsf_frmts/generic/ogreditablelayer.h",
    "ogr/ogrsf_frmts/generic/ogremulatedtransaction.cpp",
    "ogr/ogrsf_frmts/generic/ogremulatedtransaction.h",
    "ogr/ogrsf_frmts/generic/ogrlayer.cpp",
    "ogr/ogrsf_frmts/generic/ogrlayerdecorator.cpp",
    "ogr/ogrsf_frmts/generic/ogrlayerdecorator.h",
    "ogr/ogrsf_frmts/generic/ogrlayerpool.cpp",
    "ogr/ogrsf_frmts/generic/ogrlayerpool.h",
    "ogr/ogrsf_frmts/generic/ogrmutexeddatasource.cpp",
    "ogr/ogrsf_frmts/generic/ogrmutexeddatasource.h",
    "ogr/ogrsf_frmts/generic/ogrmutexedlayer.cpp",
    "ogr/ogrsf_frmts/generic/ogrmutexedlayer.h",
    "ogr/ogrsf_frmts/generic/ogrsfdriver.cpp",
    "ogr/ogrsf_frmts/generic/ogrsfdriverregistrar.cpp",
    "ogr/ogrsf_frmts/generic/ogrunionlayer.cpp",
    "ogr/ogrsf_frmts/generic/ogrunionlayer.h",
    "ogr/ogrsf_frmts/generic/ogrwarpedlayer.cpp",
    "ogr/ogrsf_frmts/generic/ogrwarpedlayer.h",
]

OGR_TAB = [
    "ogr/ogrsf_frmts/mitab/mitab_bounds.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_coordsys.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_datfile.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_feature_mif.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_feature.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_geometry.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_geometry.h",
    "ogr/ogrsf_frmts/mitab/mitab_idfile.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_imapinfofile.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_indfile.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_mapcoordblock.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_mapfile.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_mapheaderblock.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_mapindexblock.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_mapobjectblock.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_maptoolblock.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_middatafile.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_miffile.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_ogr_datasource.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_ogr_driver.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_ogr_driver.h",
    "ogr/ogrsf_frmts/mitab/mitab_priv.h",
    "ogr/ogrsf_frmts/mitab/mitab_rawbinblock.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_spatialref.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_tabfile.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_tabseamless.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_tabview.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_tooldef.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_utils.cpp",
    "ogr/ogrsf_frmts/mitab/mitab_utils.h",
    "ogr/ogrsf_frmts/mitab/mitab.h",
]

OGR_VRT = [
    "ogr/ogrsf_frmts/vrt/ogr_vrt.h",
    "ogr/ogrsf_frmts/vrt/ogrvrtdatasource.cpp",
    "ogr/ogrsf_frmts/vrt/ogrvrtdriver.cpp",
    "ogr/ogrsf_frmts/vrt/ogrvrtlayer.cpp",
]

cc_library(
    name = "ogr",
    srcs = OGR + OGR_KML + OGR_MEM + OGR_GEOJSON + OGRSF_FRMTS + OGR_TAB + OGR_VRT + [
        "ogr/ogrsf_frmts/generic/ogrregisterall.cpp"
    ],
    copts = COPTS + [
        "-DGENERIC_ENABLED",
        "-DGEOJSON_ENABLED",
        "-DKML_ENABLED",
        "-DMEM_ENABLED",
        "-DMITAB_ENABLED",
        "-DVRT_ENABLED",
    ],
    includes = [
        "ogr/ogrsf_frmts/generic",
        "ogr/ogrsf_frmts/geojson",
        "ogr/ogrsf_frmts/mem",
    ],
    deps = [
        ":apps",
        ":gdal_standard_includes",
    ]
)

cc_library(
    name = "apps",
    srcs = [
        "apps/commonutils.cpp",
        "apps/commonutils.h",
        "apps/gdal_grid_lib.cpp",
        "apps/gdal_rasterize_lib.cpp",
        "apps/gdal_translate_lib.cpp",
        "apps/gdal_utils_priv.h",
        "apps/gdal_utils.h",
        "apps/gdalbuildvrt_lib.cpp",
        "apps/gdaldem_lib.cpp",
        "apps/gdalinfo_lib.cpp",
        "apps/gdalmdiminfo_lib.cpp",
        "apps/gdalmdimtranslate_lib.cpp",
        "apps/gdalwarp_lib.cpp",
        "apps/nearblack_lib.cpp",
        "apps/ogr2ogr_lib.cpp",
    ],
    hdrs = [
        "apps/gdal_utils.h",
    ],
    includes = [
        "apps",
    ],
    copts = COPTS,
    deps = [
        ":alg",
        ":gdal_standard_includes",
    ]
)

cc_library(
    name = "gcore_mdreader",
    srcs = [
        "gcore/mdreader/reader_alos.cpp",
        "gcore/mdreader/reader_alos.h",
        "gcore/mdreader/reader_digital_globe.cpp",
        "gcore/mdreader/reader_digital_globe.h",
        "gcore/mdreader/reader_eros.cpp",
        "gcore/mdreader/reader_eros.h",
        "gcore/mdreader/reader_geo_eye.cpp",
        "gcore/mdreader/reader_geo_eye.h",
        "gcore/mdreader/reader_kompsat.cpp",
        "gcore/mdreader/reader_kompsat.h",
        "gcore/mdreader/reader_landsat.cpp",
        "gcore/mdreader/reader_landsat.h",
        "gcore/mdreader/reader_orb_view.cpp",
        "gcore/mdreader/reader_orb_view.h",
        "gcore/mdreader/reader_pleiades.cpp",
        "gcore/mdreader/reader_pleiades.h",
        "gcore/mdreader/reader_rapid_eye.cpp",
        "gcore/mdreader/reader_rapid_eye.h",
        "gcore/mdreader/reader_rdk1.cpp",
        "gcore/mdreader/reader_rdk1.h",
        "gcore/mdreader/reader_spot.cpp",
        "gcore/mdreader/reader_spot.h",
    ],
    copts = COPTS,
    deps = [
        ":gdal_standard_includes",
    ]
)

cc_library(
    name = "gcore",
    srcs = [
        "gcore/gdal_avx2_emulation.hpp",
        "gcore/gdal_mdreader.cpp",
        "gcore/gdal_misc.cpp",
        "gcore/gdal_rat.cpp",
        "gcore/gdal_thread_pool.cpp",
        "gcore/gdalabstractbandblockcache.cpp",
        "gcore/gdalallvalidmaskband.cpp",
        "gcore/gdalarraybandblockcache.cpp",
        "gcore/gdalcolortable.cpp",
        "gcore/gdaldataset.cpp",
        "gcore/gdaldefaultasync.cpp",
        "gcore/gdaldefaultoverviews.cpp",
        "gcore/gdaldllmain.cpp",
        "gcore/gdaldriver.cpp",
        "gcore/gdaldrivermanager.cpp",
        "gcore/gdalexif.cpp",
        "gcore/gdalexif.h",
        "gcore/gdalgeorefpamdataset.cpp",
        "gcore/gdalhashsetbandblockcache.cpp",
        "gcore/gdaljp2abstractdataset.cpp",
        "gcore/gdaljp2box.cpp",
        "gcore/gdaljp2metadata.cpp",
        "gcore/gdaljp2metadatagenerator.cpp",
        "gcore/gdaljp2metadatagenerator.h",
        "gcore/gdaljp2structure.cpp",
        "gcore/gdalmajorobject.cpp",
        "gcore/gdalmultidim.cpp",
        "gcore/gdalmultidomainmetadata.cpp",
        "gcore/gdalnodatamaskband.cpp",
        "gcore/gdalnodatavaluesmaskband.cpp",
        "gcore/gdalopeninfo.cpp",
        "gcore/gdaloverviewdataset.cpp",
        "gcore/gdalpamdataset.cpp",
        "gcore/gdalpamproxydb.cpp",
        "gcore/gdalpamrasterband.cpp",
        "gcore/gdalproxydataset.cpp",
        "gcore/gdalproxypool.cpp",
        "gcore/gdalpython.cpp",
        "gcore/gdalpythondriverloader.cpp",
        "gcore/gdalrasterband.cpp",
        "gcore/gdalrasterblock.cpp",
        "gcore/gdalrescaledalphaband.cpp",
        "gcore/gdalvirtualmem.cpp",
        "gcore/nasakeywordhandler.cpp",
        "gcore/nasakeywordhandler.h",
        "gcore/overview.cpp",
        "gcore/rasterio_ssse3.cpp",
        "gcore/rasterio_ssse3.h",
        "gcore/rasterio.cpp",
        "gcore/rawdataset.cpp",
        "gcore/tilematrixset.cpp",
    ] + [
        "frmts/gtiff/cogdriver.cpp",
        "frmts/gtiff/cogdriver.h",
        "frmts/gtiff/geotiff.cpp",
        "frmts/gtiff/gt_citation.cpp",
        "frmts/gtiff/gt_citation.h",
        "frmts/gtiff/gt_jpeg_copy.cpp",
        "frmts/gtiff/gt_jpeg_copy.h",
        "frmts/gtiff/gt_overview.cpp",
        "frmts/gtiff/gt_overview.h",
        "frmts/gtiff/gt_wkt_srs_priv.h",
        "frmts/gtiff/gt_wkt_srs.cpp",
        "frmts/gtiff/gt_wkt_srs.h",
        "frmts/gtiff/gtiff.h",
        "frmts/gtiff/quant_table_md5sum_jpeg9e.h",
        "frmts/gtiff/quant_table_md5sum.h",
        "frmts/gtiff/tif_jxl.h",
        "frmts/gtiff/tifvsi.cpp",
        "frmts/gtiff/tifvsi.h",
    ] + [
        "frmts/mem/memdataset.cpp",
        "frmts/mem/memmultidim.h",
    ] + [
        "frmts/vrt/pixelfunctions.cpp",
        "frmts/vrt/vrtdataset.cpp",
        "frmts/vrt/vrtderivedrasterband.cpp",
        "frmts/vrt/vrtdriver.cpp",
        "frmts/vrt/vrtfilters.cpp",
        "frmts/vrt/vrtmultidim.cpp",
        "frmts/vrt/vrtpansharpened.cpp",
        "frmts/vrt/vrtrasterband.cpp",
        "frmts/vrt/vrtrawrasterband.cpp",
        "frmts/vrt/vrtsourcedrasterband.cpp",
        "frmts/vrt/vrtsources.cpp",
        "frmts/vrt/vrtwarped.cpp",
    ] + [
        "frmts/hfa/hfa_overviews.cpp",
        "frmts/hfa/hfa_p.h",
        "frmts/hfa/hfa.h",
        "frmts/hfa/hfaband.cpp",
        "frmts/hfa/hfacompress.cpp",
        "frmts/hfa/hfadataset.cpp",
        "frmts/hfa/hfadataset.h",
        "frmts/hfa/hfadictionary.cpp",
        "frmts/hfa/hfaentry.cpp",
        "frmts/hfa/hfafield.cpp",
        "frmts/hfa/hfaopen.cpp",
        "frmts/hfa/hfatype.cpp",
    ] + [
        "frmts/derived/deriveddataset.cpp",
        "frmts/derived/derivedlist.c",
        "frmts/derived/derivedlist.h",
    ] + [
        "frmts/gdalallregister.cpp",
    ],
    copts = COPTS + [
        "-DFRMT_gtiff",
        "-DFRMT_mem",
        "-DFRMT_vrt",
        "-DFRMT_hfa",
    ] + SPECIALIZED_COPTS,
    deps = [
        ":alg",
        ":apps",
        ":cpl",
        ":gcore_mdreader",
        ":gdal_standard_includes",
        ":geotiff",
        ":ogr",
        "@proj",
    ],
)

cc_shared_library(
    name = "gdal_so",
    shared_lib_name = "libgdal.so.31",
    deps = [
        ":alg",
        ":apps",
        ":cpl",
        ":gcore",
        ":geotiff",
        ":ogr",
    ],
    dynamic_deps = [
        "@proj//:proj_so",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "gdal",
    srcs = [
        ":gdal_so",
    ],
    deps = [
        ":gdal_standard_includes",
    ],
    data = [
        "@proj//:proj_data"
    ],
    visibility = ["//visibility:public"],
)

cc_binary(
    name = "gdalinfo",
    srcs = [
        "apps/gdal_utils_priv.h",
        "apps/gdalinfo_bin.cpp",
    ],
    copts = COPTS,
    deps = [
        ":gdal",
    ]
)

EXTENSIONS = {
    "swig/python/osgeo/_gdal_array.so": "swig/python/extensions/gdal_array_wrap.cpp",
    "swig/python/osgeo/_gdal.so": "swig/python/extensions/gdal_wrap.cpp",
    "swig/python/osgeo/_gdalconst.so": "swig/python/extensions/gdalconst_wrap.c",
    "swig/python/osgeo/_ogr.so": "swig/python/extensions/ogr_wrap.cpp",
    "swig/python/osgeo/_osr.so": "swig/python/extensions/osr_wrap.cpp",
}

[
    cc_binary(
        name = name,
        srcs = [
            src,
        ],
        linkshared = True,
        deps = [
            "@python3//:hdrs",
            "@numpy_headers",
            ":gdal",
        ],
        copts = COPTS + [
            "-Wno-deprecated-declarations",
        ]
    )
    for (name, src) in EXTENSIONS.items()
]
